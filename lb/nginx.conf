worker_processes auto;
events { worker_connections 1024; }
http {

    map $cookie_route $route { "" $request_id; default $cookie_route; }
    map $cookie_route $need_set_cookie { "" 1; default 0; }

    upstream chess_backend {
        hash $route consistent;
        server host.docker.internal:8081 max_fails=3 fail_timeout=10s;
        server host.docker.internal:8082 max_fails=3 fail_timeout=10s;
    }

    server { 
        listen 8080;
        location = /health {
            return 200 "OK\n";
        }

        location = / {
            if ($need_set_cookie) {
                add_header Set-Cookie "route=$route; Path=/; HttpOnly; SameSite=Lax";
            }

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Request-ID $request_id;

            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;

            proxy_pass http://chess_backend;
        }
    }
}